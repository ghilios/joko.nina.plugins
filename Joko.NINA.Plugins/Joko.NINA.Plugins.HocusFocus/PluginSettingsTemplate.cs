


using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using NINA.Profile.Interfaces;
using NINA.Core.Utility;

// Auto Generated by "PluginSettingsTemplate.tt"
namespace NINA.Profile.Interfaces {
    public interface IPluginSettings : ISettings {
        void SetValue(Guid pluginId, string key, Boolean value);
        bool TryGetValue(Guid pluginId, string key, out Boolean value);
        void SetValue(Guid pluginId, string key, Byte value);
        bool TryGetValue(Guid pluginId, string key, out Byte value);
        void SetValue(Guid pluginId, string key, SByte value);
        bool TryGetValue(Guid pluginId, string key, out SByte value);
        void SetValue(Guid pluginId, string key, Char value);
        bool TryGetValue(Guid pluginId, string key, out Char value);
        void SetValue(Guid pluginId, string key, Decimal value);
        bool TryGetValue(Guid pluginId, string key, out Decimal value);
        void SetValue(Guid pluginId, string key, Double value);
        bool TryGetValue(Guid pluginId, string key, out Double value);
        void SetValue(Guid pluginId, string key, Single value);
        bool TryGetValue(Guid pluginId, string key, out Single value);
        void SetValue(Guid pluginId, string key, Int32 value);
        bool TryGetValue(Guid pluginId, string key, out Int32 value);
        void SetValue(Guid pluginId, string key, UInt32 value);
        bool TryGetValue(Guid pluginId, string key, out UInt32 value);
        void SetValue(Guid pluginId, string key, Int64 value);
        bool TryGetValue(Guid pluginId, string key, out Int64 value);
        void SetValue(Guid pluginId, string key, UInt64 value);
        bool TryGetValue(Guid pluginId, string key, out UInt64 value);
        void SetValue(Guid pluginId, string key, Int16 value);
        bool TryGetValue(Guid pluginId, string key, out Int16 value);
        void SetValue(Guid pluginId, string key, UInt16 value);
        bool TryGetValue(Guid pluginId, string key, out UInt16 value);
        void SetValue(Guid pluginId, string key, String value);
        bool TryGetValue(Guid pluginId, string key, out String value);
        void SetValue(Guid pluginId, string key, DateTime value);
        bool TryGetValue(Guid pluginId, string key, out DateTime value);
        void SetValue(Guid pluginId, string key, Guid value);
        bool TryGetValue(Guid pluginId, string key, out Guid value);
        bool TryGetTypeOfField(Guid pluginId, string key, out Type fieldType);
}
}
// Auto Generated by "PluginSettingsTemplate.tt"
namespace NINA.Profile {
    [Serializable()]
    [DataContract]
    public partial class PluginSettings : Settings, IPluginSettings {
        public PluginSettings() {
            pluginStorage = new Dictionary<Guid, IDictionary<string, object>>();
        }
        
        [DataMember]
        private IDictionary<Guid, IDictionary<string, object>> pluginStorage { get; set; }
        
        protected override void SetDefaultValues() {
            pluginStorage = new Dictionary<Guid, IDictionary<string, object>>();
        }

        public void SetValue(Guid pluginId, string key, Boolean value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out Boolean value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(Boolean)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(Boolean);
                        return false;
                    }
                    value = (Boolean)obj;
                    return true;
                }
            }
            value = default(Boolean);
            return false;
        }
        public void SetValue(Guid pluginId, string key, Byte value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out Byte value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(Byte)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(Byte);
                        return false;
                    }
                    value = (Byte)obj;
                    return true;
                }
            }
            value = default(Byte);
            return false;
        }
        public void SetValue(Guid pluginId, string key, SByte value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out SByte value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(SByte)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(SByte);
                        return false;
                    }
                    value = (SByte)obj;
                    return true;
                }
            }
            value = default(SByte);
            return false;
        }
        public void SetValue(Guid pluginId, string key, Char value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out Char value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(Char)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(Char);
                        return false;
                    }
                    value = (Char)obj;
                    return true;
                }
            }
            value = default(Char);
            return false;
        }
        public void SetValue(Guid pluginId, string key, Decimal value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out Decimal value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(Decimal)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(Decimal);
                        return false;
                    }
                    value = (Decimal)obj;
                    return true;
                }
            }
            value = default(Decimal);
            return false;
        }
        public void SetValue(Guid pluginId, string key, Double value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out Double value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(Double)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(Double);
                        return false;
                    }
                    value = (Double)obj;
                    return true;
                }
            }
            value = default(Double);
            return false;
        }
        public void SetValue(Guid pluginId, string key, Single value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out Single value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(Single)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(Single);
                        return false;
                    }
                    value = (Single)obj;
                    return true;
                }
            }
            value = default(Single);
            return false;
        }
        public void SetValue(Guid pluginId, string key, Int32 value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out Int32 value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(Int32)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(Int32);
                        return false;
                    }
                    value = (Int32)obj;
                    return true;
                }
            }
            value = default(Int32);
            return false;
        }
        public void SetValue(Guid pluginId, string key, UInt32 value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out UInt32 value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(UInt32)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(UInt32);
                        return false;
                    }
                    value = (UInt32)obj;
                    return true;
                }
            }
            value = default(UInt32);
            return false;
        }
        public void SetValue(Guid pluginId, string key, Int64 value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out Int64 value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(Int64)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(Int64);
                        return false;
                    }
                    value = (Int64)obj;
                    return true;
                }
            }
            value = default(Int64);
            return false;
        }
        public void SetValue(Guid pluginId, string key, UInt64 value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out UInt64 value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(UInt64)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(UInt64);
                        return false;
                    }
                    value = (UInt64)obj;
                    return true;
                }
            }
            value = default(UInt64);
            return false;
        }
        public void SetValue(Guid pluginId, string key, Int16 value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out Int16 value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(Int16)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(Int16);
                        return false;
                    }
                    value = (Int16)obj;
                    return true;
                }
            }
            value = default(Int16);
            return false;
        }
        public void SetValue(Guid pluginId, string key, UInt16 value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out UInt16 value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(UInt16)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(UInt16);
                        return false;
                    }
                    value = (UInt16)obj;
                    return true;
                }
            }
            value = default(UInt16);
            return false;
        }
        public void SetValue(Guid pluginId, string key, String value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out String value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(String)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(String);
                        return false;
                    }
                    value = (String)obj;
                    return true;
                }
            }
            value = default(String);
            return false;
        }
        public void SetValue(Guid pluginId, string key, DateTime value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out DateTime value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(DateTime)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(DateTime);
                        return false;
                    }
                    value = (DateTime)obj;
                    return true;
                }
            }
            value = default(DateTime);
            return false;
        }
        public void SetValue(Guid pluginId, string key, Guid value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out Guid value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(Guid)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(Guid);
                        return false;
                    }
                    value = (Guid)obj;
                    return true;
                }
            }
            value = default(Guid);
            return false;
        }
        public bool TryGetTypeOfField(Guid pluginId, string key, out Type fieldType) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    fieldType = obj.GetType();
                    return true;
                }
            }
            fieldType = null;
            return false;;
        }
    } 
}