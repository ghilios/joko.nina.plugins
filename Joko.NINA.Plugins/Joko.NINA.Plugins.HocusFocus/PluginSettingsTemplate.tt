<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="$(TargetPath)" #>


<# Type[] types = new[] {
        typeof(bool),
        typeof(byte),
        typeof(sbyte),
        typeof(char),
        typeof(decimal),
        typeof(double),
        typeof(float),
        typeof(int),
        typeof(uint),
        typeof(long),
        typeof(ulong),
        typeof(short),
        typeof(ushort),
        typeof(string),
        typeof(DateTime),
        typeof(Guid)
    };
#>

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using NINA.Profile.Interfaces;
using NINA.Core.Utility;

// Auto Generated by "PluginSettingsTemplate.tt"
namespace NINA.Profile.Interfaces {
    public interface IPluginSettings : ISettings {
    <# foreach (var type in types) { 
    #>
    void SetValue(Guid pluginId, string key, <#= type.Name #> value);
        bool TryGetValue(Guid pluginId, string key, out <#= type.Name #> value);
    <#
    } #>
    bool TryGetTypeOfField(Guid pluginId, string key, out Type fieldType);
}
}
// Auto Generated by "PluginSettingsTemplate.tt"
namespace NINA.Profile {
    [Serializable()]
    [DataContract]
    public partial class PluginSettings : Settings, IPluginSettings {
        public PluginSettings() {
            pluginStorage = new Dictionary<Guid, IDictionary<string, object>>();
        }
        
        [DataMember]
        private IDictionary<Guid, IDictionary<string, object>> pluginStorage { get; set; }
        
        protected override void SetDefaultValues() {
            pluginStorage = new Dictionary<Guid, IDictionary<string, object>>();
        }

    <# foreach (var type in types) { 
    #>
    public void SetValue(Guid pluginId, string key, <#= type.Name #> value) {
            if (!pluginStorage.ContainsKey(pluginId)) {
                pluginStorage[pluginId] = new Dictionary<string, object>();
            }
            Logger.Trace($"Setting plugin {pluginId} field {key} with value {value}");
            pluginStorage[pluginId][key] = value;
            RaisePropertyChanged(pluginId + "-" + key);
        }

        public bool TryGetValue(Guid pluginId, string key, out <#= type.Name #> value) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    if(obj.GetType() != typeof(<#= type.Name #>)) {
                        Logger.Trace("Incorrect type specified to get value");
                        value = default(<#= type.Name #>);
                        return false;
                    }
                    value = (<#= type.Name #>)obj;
                    return true;
                }
            }
            value = default(<#= type.Name #>);
            return false;
        }
    <#
    } #>
    public bool TryGetTypeOfField(Guid pluginId, string key, out Type fieldType) {
            if (pluginStorage.TryGetValue(pluginId, out var dic)) {
                if (dic.TryGetValue(key, out var obj)) {
                    fieldType = obj.GetType();
                    return true;
                }
            }
            fieldType = null;
            return false;;
        }
    } 
}